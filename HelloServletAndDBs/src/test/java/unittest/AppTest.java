/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package unittest;

import model.Category;
import model.Topic;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    private EntityManager em;

    @Before
    public void init() {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("dbDS");
        em = emf.createEntityManager();
        em.getTransaction().begin();
    }

    @After
    public void close() {
        if (em.getTransaction().isActive()) {
            em.getTransaction().commit();
        }
        em.getEntityManagerFactory().close();
        em.close();
    }

    //    @Test public void shouldStartHibernate() {
//        EntityManagerFactory emf = Persistence.createEntityManagerFactory("dbDS");
//        EntityManager entityManager = emf.createEntityManager();
//    }
    @Test
    public void shouldPersistCategory() {
        Category cat = new Category();
        cat.setTitle("new Category");
        em.persist(cat);
    }

    @Test
    public void shouldFindCategory() {
        Category cat = new Category();
        cat.setTitle("test");
        em.persist(cat);
        Category result = em.find(Category.class, 1L);
        assertNotNull(result);
    }

    @Test
    public void shouldPersistCategoryAndTopics() {
        Category cat = new Category();
        cat.setTitle("test");
        Topic topic = new Topic();
        topic.setTitle("topic");
        topic.setCategory(cat);
        em.persist(cat);
    }

    @Test
    public void shouldPerformQuery() {
        Category cat = new Category();
        cat.setTitle("query");
        em.persist(cat);
        Query query = em.createQuery("SELECT c from Category c WHERE c.title = 'query'");
        assertNotNull(query.getSingleResult());
    }

    @Test
    public void shouldFindWithCriteriaAPI() {
        Category cat = new Category();
        em.persist(cat);
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Category> query = cb.createQuery(Category.class);
        Root<Category> c = query.from(Category.class);
        query.select(c);
        List<Category> resultList = em.createQuery(query).getResultList();
        assertEquals(1, resultList.size());
    }
}


